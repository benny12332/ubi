apiVersion: flows.netobserv.io/v1beta2
kind: FlowCollector
metadata:
  annotations:
    flows.netobserv.io/flowcollectorlegacy-namespace: netobserv
    flows.netobserv.io/flpparent-namespace: netobserv
  creationTimestamp: '2024-04-10T00:57:22Z'
  finalizers:
    - flows.netobserv.io/finalizer
  generation: 4
  managedFields:
    - apiVersion: flows.netobserv.io/v1beta2
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          .: {}
          'f:agent':
            .: {}
            'f:ebpf':
              'f:excludeInterfaces': {}
              'f:kafkaBatchSize': {}
              'f:cacheActiveTimeout': {}
              .: {}
              'f:cacheMaxFlows': {}
              'f:resources':
                .: {}
                'f:limits':
                  .: {}
                  'f:memory': {}
                'f:requests':
                  .: {}
                  'f:cpu': {}
                  'f:memory': {}
              'f:logLevel': {}
              'f:sampling': {}
              'f:imagePullPolicy': {}
            'f:ipfix':
              .: {}
              'f:cacheActiveTimeout': {}
              'f:cacheMaxFlows': {}
              'f:clusterNetworkOperator':
                .: {}
                'f:namespace': {}
              'f:ovnKubernetes':
                .: {}
                'f:containerName': {}
                'f:daemonSetName': {}
                'f:namespace': {}
              'f:sampling': {}
            'f:type': {}
          'f:consolePlugin':
            'f:quickFilters': {}
            'f:autoscaler':
              .: {}
              'f:maxReplicas': {}
              'f:status': {}
            .: {}
            'f:replicas': {}
            'f:resources':
              .: {}
              'f:limits':
                .: {}
                'f:memory': {}
              'f:requests':
                .: {}
                'f:cpu': {}
                'f:memory': {}
            'f:logLevel': {}
            'f:advanced':
              .: {}
              'f:port': {}
              'f:register': {}
            'f:enable': {}
            'f:portNaming':
              .: {}
              'f:enable': {}
            'f:imagePullPolicy': {}
          'f:deploymentModel': {}
          'f:kafka':
            .: {}
            'f:address': {}
            'f:sasl':
              .: {}
              'f:type': {}
            'f:tls': {}
            'f:topic': {}
          'f:loki':
            'f:monolithic':
              .: {}
              'f:tenantID': {}
              'f:tls': {}
              'f:url': {}
            'f:writeBatchWait': {}
            .: {}
            'f:microservices':
              .: {}
              'f:ingesterUrl': {}
              'f:querierUrl': {}
              'f:tenantID': {}
              'f:tls': {}
            'f:writeBatchSize': {}
            'f:lokiStack':
              .: {}
              'f:name': {}
              'f:namespace': {}
            'f:advanced':
              .: {}
              'f:staticLabels':
                .: {}
                'f:app': {}
              'f:writeMaxBackoff': {}
              'f:writeMaxRetries': {}
              'f:writeMinBackoff': {}
            'f:writeTimeout': {}
            'f:mode': {}
            'f:readTimeout': {}
            'f:enable': {}
            'f:manual':
              .: {}
              'f:authToken': {}
              'f:ingesterUrl': {}
              'f:querierUrl': {}
              'f:statusTls': {}
              'f:tenantID': {}
              'f:tls': {}
          'f:namespace': {}
          'f:processor':
            'f:kafkaConsumerReplicas': {}
            'f:kafkaConsumerQueueCapacity': {}
            'f:logTypes': {}
            .: {}
            'f:metrics':
              .: {}
              'f:server':
                .: {}
                'f:port': {}
                'f:tls':
                  .: {}
                  'f:type': {}
            'f:resources':
              .: {}
              'f:limits':
                .: {}
                'f:memory': {}
              'f:requests':
                .: {}
                'f:cpu': {}
                'f:memory': {}
            'f:kafkaConsumerBatchSize': {}
            'f:logLevel': {}
            'f:advanced':
              'f:enableKubeProbes': {}
              'f:conversationHeartbeatInterval': {}
              .: {}
              'f:healthPort': {}
              'f:dropUnusedFields': {}
              'f:port': {}
              'f:profilePort': {}
              'f:conversationTerminatingTimeout': {}
              'f:conversationEndTimeout': {}
            'f:multiClusterDeployment': {}
            'f:imagePullPolicy': {}
            'f:kafkaConsumerAutoscaler':
              .: {}
              'f:maxReplicas': {}
              'f:status': {}
      manager: Mozilla
      operation: Update
      time: '2024-04-10T00:57:22Z'
    - apiVersion: flows.netobserv.io/v1beta2
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:flows.netobserv.io/flowcollectorlegacy-namespace': {}
            'f:flows.netobserv.io/flpparent-namespace': {}
          'f:finalizers':
            .: {}
            'v:"flows.netobserv.io/finalizer"': {}
        'f:spec':
          'f:agent':
            'f:ipfix':
              'f:forceSampleAll': {}
          'f:kafka':
            'f:sasl':
              'f:clientIDReference':
                'f:namespace': {}
              'f:clientSecretReference':
                'f:namespace': {}
            'f:tls':
              'f:caCert':
                'f:namespace': {}
              'f:enable': {}
              'f:insecureSkipVerify': {}
              'f:userCert':
                'f:namespace': {}
          'f:loki':
            'f:manual':
              'f:statusTls':
                'f:caCert':
                  'f:namespace': {}
                'f:enable': {}
                'f:insecureSkipVerify': {}
                'f:userCert':
                  'f:namespace': {}
              'f:tls':
                'f:caCert':
                  'f:namespace': {}
                'f:enable': {}
                'f:insecureSkipVerify': {}
                'f:userCert':
                  'f:namespace': {}
            'f:microservices':
              'f:tls':
                'f:caCert':
                  'f:namespace': {}
                'f:enable': {}
                'f:insecureSkipVerify': {}
                'f:userCert':
                  'f:namespace': {}
            'f:monolithic':
              'f:tls':
                'f:caCert':
                  'f:namespace': {}
                'f:enable': {}
                'f:insecureSkipVerify': {}
                'f:userCert':
                  'f:namespace': {}
          'f:processor':
            'f:clusterName': {}
            'f:metrics':
              'f:server':
                'f:tls':
                  'f:insecureSkipVerify': {}
      manager: manager
      operation: Update
      time: '2024-04-10T00:57:22Z'
    - apiVersion: flows.netobserv.io/v1beta2
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          'f:conditions': {}
      manager: manager
      operation: Update
      subresource: status
      time: '2024-04-10T01:19:05Z'
  name: cluster
  resourceVersion: '273648'
  uid: 15a93a39-46e4-4a3e-8ca6-b78c24b6503a
spec:
  agent:
    ebpf:
      cacheActiveTimeout: 5s
      cacheMaxFlows: 100000
      excludeInterfaces:
        - lo
      imagePullPolicy: IfNotPresent
      kafkaBatchSize: 1048576
      logLevel: info
      resources:
        limits:
          memory: 800Mi
        requests:
          cpu: 100m
          memory: 50Mi
      sampling: 50
    ipfix:
      cacheActiveTimeout: 20s
      cacheMaxFlows: 400
      clusterNetworkOperator:
        namespace: openshift-network-operator
      ovnKubernetes:
        containerName: ovnkube-node
        daemonSetName: ovnkube-node
        namespace: ovn-kubernetes
      sampling: 400
    type: eBPF
  consolePlugin:
    autoscaler:
      maxReplicas: 3
      status: Disabled
    enable: true
    imagePullPolicy: IfNotPresent
    logLevel: info
    portNaming:
      enable: true
    quickFilters:
      - default: true
        filter:
          flow_layer: app
        name: Applications
      - filter:
          flow_layer: infra
        name: Infrastructure
      - default: true
        filter:
          dst_kind: Pod
          src_kind: Pod
        name: Pods network
      - filter:
          dst_kind: Service
        name: Services network
    replicas: 1
    resources:
      limits:
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 50Mi
  deploymentModel: Direct
  exporters: []
  kafka:
    address: ''
    sasl:
      clientIDReference: {}
      clientSecretReference: {}
      type: Disabled
    tls:
      caCert: {}
      userCert: {}
    topic: ''
  loki:
    writeTimeout: 10s
    microservices:
      ingesterUrl: 'http://loki-distributor:3100/'
      querierUrl: 'http://loki-query-frontend:3100/'
      tenantID: netobserv
      tls:
        caCert: {}
        userCert: {}
    enable: true
    mode: LokiStack
    manual:
      authToken: Disabled
      ingesterUrl: 'http://loki:3100/'
      querierUrl: 'http://loki:3100/'
      statusTls:
        caCert: {}
        userCert: {}
      tenantID: netobserv
      tls:
        caCert: {}
        userCert: {}
    lokiStack:
      name: loki
      namespace: netobserv
    readTimeout: 30s
    monolithic:
      tenantID: netobserv
      tls:
        caCert: {}
        userCert: {}
      url: 'http://loki:3100/'
    writeBatchWait: 1s
    writeBatchSize: 102400
  namespace: netobserv
  processor:
    logLevel: info
    metrics:
      server:
        port: 9102
        tls:
          type: Disabled
    resources:
      limits:
        memory: 800Mi
      requests:
        cpu: 100m
        memory: 100Mi
    multiClusterDeployment: false
    kafkaConsumerQueueCapacity: 1000
    imagePullPolicy: IfNotPresent
    kafkaConsumerAutoscaler:
      maxReplicas: 3
      status: Disabled
    logTypes: Flows
    kafkaConsumerReplicas: 3
    kafkaConsumerBatchSize: 10485760
